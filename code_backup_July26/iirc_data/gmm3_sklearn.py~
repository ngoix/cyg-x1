from visualization_fct import *
from sklearn.mixture import GaussianMixture

# from bokeh.plotting import output_file, show, save
# from bokeh.mpl import to_bokeh

from bokeh.resources import CDN
from bokeh.embed import file_html

import matplotlib.pyplot as plt  # , mpld3
import pyfits

hdulist = pyfits.open('../iirc_data/all_data_for_ml.fits')

without_CA = False

data = pd.read_csv("asm_data_for_ml.txt", sep='\t')
del data['MJD']
del data['error']
del data['errorA']
del data['errorB']
del data['errorC']
data['rateCA'] = data.rateC / data.rateA
data_thr = mask(data, 'orbit')  # rm too large values except for 'orbit'


# GMM with 3 components: (even without rateCA in the training data, we observe
# its particular role)
np.random.seed(0)

if without_CA:
    X = np.c_[data_thr.orbit, data_thr.rate, data_thr.rateA, data_thr.rateB,
              data_thr.rateC]
    Html_file = open("gmm3_sklearn_files/gmm3_sklearn_without_rateCA.html",
                     "w")
else:
    X = np.c_[data_thr.orbit, data_thr.rate, data_thr.rateA, data_thr.rateB,
              data_thr.rateC, data_thr.rateCA]
    Html_file = open("gmm3_sklearn_files/gmm3_sklearn.html", "w")

gmm = GaussianMixture(n_components=3, n_init=5).fit(X)
preds = gmm.predict(X)
probs = gmm.predict_proba(X)

data_thr['preds'] = pd.Series(preds).astype("category")

color_key = ["red", "yellow", "blue", "grey", "black", "purple", "pink",
             "brown", "green", "orange"]  # Spectral9
color_key = color_key[:len(set(preds))+1]

covs = gmm.covariances_
means = gmm.means_


# # uncomment  to show interactive probas:
# p = plot_probas(data_thr, probs)
# plt.show()


p = scatter_matrix(data_thr, covs=covs, means=means, color_key=color_key)
html = file_html(p, CDN, "sklearn gmm with 3 components")
Html_file.write(html)
Html_file.write('<br><br><br><br><br><br><br><br><br><br><br><br>')
Html_file.write('<br><br><br><br><br><br><br><br><br><br><br><br>')
Html_file.write('<br><br><br><br><br><br><br><br><br><br><br><br>')

# p = interactive_img_ds(data_thr, 'rateCA', 'rate')
# waiting for InteractiveImage -> html

fig = plot_probs_datashader(probs)
html = file_html(fig, CDN, "probas with datashader")
Html_file.write(html)
Html_file.write('<br><br><br><br><br><br><br><br><br><br><br><br>')


fig = scatter_matrix_seaborn(data_thr)
plt.title('seaborn_scatterplot')
fig.fig.savefig('gmm3_sklearn_files/gmm3_sklearn_seaborn_scatterplot.png')
data_uri = open('gmm3_sklearn_files/gmm3_sklearn_seaborn_scatterplot.png',
                'rb').read().encode('base64').replace('\n', '')
img_tag = '<img src="data:image/png;base64,{0}">'.format(data_uri)
Html_file.write(img_tag)
Html_file.close()
