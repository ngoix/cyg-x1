from visualization_fct import *
from sklearn.mixture import GaussianMixture

# from bokeh.plotting import output_file, show, save
# from bokeh.mpl import to_bokeh

from bokeh.resources import CDN
from bokeh.embed import file_html

import matplotlib.pyplot as plt  # , mpld3
import pyfits

# for now, no ratio in data (no rates A, B or C in this dataset)
# without_CA = True

hdulist = pyfits.open('../iirc_data/all_data_for_ml.fits')
data = hdulist[1].data

names = [data.columns[j].name for j in range(len(data.columns))]

# rm str attribute:
names.remove('block')

# for now, rm multidim attributes:
names.remove('en_lo')
names.remove('en_hi')
names.remove('flux')
names.remove('flux_err')

# also remove error terms, tstart and tstop:
names.remove('rms1')
names.remove('rms2')
names.remove('rms3')
names.remove('rms4')
names.remove('tstart')
names.remove('tstop')


# we need to change the byte order for fits -> dataframe:
data_fr = pd.DataFrame({name: data[name].byteswap().newbyteorder()
                        for name in names})
# rm the rows with nan values:
data_fr = data_fr.dropna()

# rm too large values except for 'orbit':
data_thr = mask(data_fr, ['orbitalphase', 'smoothorbitalphase'])


# GMM with 3 components: (even without rateCA in the training data, we observe
# its particular role)
np.random.seed(0)

X = np.c_[[data_thr[name] for name in names]]
Html_file = open("gmm3_pomegranate_files/gmm3_pomegranate.html", "w")

gmm = GaussianMixture(n_components=3, n_init=5).fit(X)
preds = gmm.predict(X)
probs = gmm.predict_proba(X)

data_thr['preds'] = pd.Series(preds).astype("category")

color_key = ["red", "yellow", "blue", "grey", "black", "purple", "pink",
             "brown", "green", "orange"]  # Spectral9
color_key = color_key[:len(set(preds))+1]

covs = gmm.covariances_
means = gmm.means_


# # uncomment  to show interactive probas:
# p = plot_probas(data_thr, probs)
# plt.show()


p = scatter_matrix(data_thr, covs=covs, means=means, color_key=color_key)
html = file_html(p, CDN, "pomegranate gmm with 3 components")
Html_file.write(html)
Html_file.write('<br><br><br><br><br><br><br><br><br><br><br><br>')
Html_file.write('<br><br><br><br><br><br><br><br><br><br><br><br>')
Html_file.write('<br><br><br><br><br><br><br><br><br><br><br><br>')
Html_file.write('<br><br><br><br><br><br><br><br><br><br><br><br>')
Html_file.write('<br><br><br><br><br><br><br><br><br><br><br><br>')
Html_file.write('<br><br><br><br><br><br><br><br><br><br><br><br>')
Html_file.write('<br><br><br><br><br><br><br><br><br><br><br><br>')
Html_file.write('<br><br><br><br><br><br><br><br><br><br><br><br>')
Html_file.write('<br><br><br><br><br><br><br><br><br><br><br><br>')

# p = interactive_img_ds(data_thr, 'rateCA', 'rate')
# waiting for InteractiveImage -> html

fig = plot_probs_datashader(probs)
html = file_html(fig, CDN, "probas with datashader")
Html_file.write(html)
Html_file.write('<br><br><br><br><br><br><br><br><br><br><br><br>')


# fig = scatter_matrix_seaborn(data_thr)
# plt.title('seaborn_scatterplot')
# fig.fig.savefig('gmm3_pomegranate_files/gmm3_pomegranate_seaborn_scatterplot.png')
# data_uri = open('gmm3_pomegranate_files/gmm3_pomegranate_seaborn_scatterplot.png',
#                 'rb').read().encode('base64').replace('\n', '')
# img_tag = '<img src="data:image/png;base64,{0}">'.format(data_uri)
# Html_file.write(img_tag)
Html_file.close()
